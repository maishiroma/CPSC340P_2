How to use Git with Unity

In order to prevent the master branch from getting too cluttered, we're going to implement branches so that everyone can
branch off of the master branch and only merge the changes that they made into it. First, to make a branch: 
- git checkout -b [name of branch] (I've already made a branch called postAlpha; if you don't see it, just make your own branch)

In order to switch from branch to branch, simply do:
- git checkout [name of branch]
And to check the current branches in the repository/the branch you're in, do:
- git branch

After doing this, you can now commit the files you worked on in your branch to that branch you made personally. It's still the following:
- git add [file name] (-A means add everything in the current folder you're in, * adds everything that's in the cloned folder. You can upload a specific folder too like Script1.cs, texture1.png, Music/ too of you want to be specific. Just remember to add the .meta file too!)
- git commit -m ("description of what you edited") [file name] (if you don't add a file name, you'll just commit everything you added so far.)
- git push -u origin [name of branch you're in] (DO NOT PUSH TO THE MASTER BRANCH YET)

Once you've gotten your changes approved/working, you can then merge yoru branch to the master branch. Do the following:
- git checkout master
- git merge [name of your branch you have your approved changes] --no-ff
- git push -u origin master

If you need a fresh copy of the master branch/your current branch, make sure you're in the right branch in Git Bash/Terminal and do:
- git pull

(I've tried to summarize what I found on websites: you should read them so you can double check what I said.)
Preparing Unity with GitHub: http://stackoverflow.com/questions/21573405/how-to-prepare-a-unity-project-for-git
Creating branches and meging them to the master branch: https://www.digitalocean.com/community/tutorials/how-to-use-git-branches
